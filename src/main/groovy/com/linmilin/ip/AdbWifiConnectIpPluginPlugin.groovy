/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package com.linmilin.ip

import dk.appdictive.adbwificonnect.Device
import org.gradle.api.Project
import org.gradle.api.Plugin

import java.util.prefs.Preferences

class AdbWifiConnectIpPluginExtension {
    String ip;

}

/**
 * A simple 'hello world' plugin.
 */
public class AdbWifiConnectIpPluginPlugin implements Plugin<Project> {

    public void apply(Project project) {

        def extension = project.extensions.create('SwitchAdbWiFiIp', AdbWifiConnectIpPluginExtension);
//
//        // Register a task
//        project.tasks.register("greeting") {
//            doLast {
//                println("Hello from plugin 'com.linmilin.ip.greeting'")
//            }
//        }

        project.tasks.register("SwitchAdbWiFiConnectIp") {
            doLast {


                String ip = extension.ip;
                if (ip == null || ip.isEmpty()) {
                    println 'please set ip address'
                    return;
                }

                changeDeviceIp(ip);
            }


        }

//        project.extensions.extraProperties.set('ip',)
    }

    public static void changeDeviceIp(String ip) {

        String PREFS_ID = "dk/appdictive/adbconnect";
        String PREF_SAVED_CONNECTIONS = "SAVED_CONNECTIONS";

        Preferences systemRoot = Preferences.userRoot();
        Preferences prefs = systemRoot.node(PREFS_ID);

        String deviceDataStr = prefs.get(PREF_SAVED_CONNECTIONS, null);
        println deviceDataStr

        //没有以前的已连接设备
        if (deviceDataStr == null || deviceDataStr.isEmpty()) {
            println 'please use usb connect device first time'
        } else {
            Device[] devices = Utils.deserializeArray(deviceDataStr);

            if(devices == null){
                println 'please use usb connect device first time'
                return;
            }

            devices.each {
                it.remoteIP = ip;
            }

            String data = Utils.serializeArray(devices);
            prefs.put(PREF_SAVED_CONNECTIONS, data)
            prefs.sync()

            println ''
        }
    }
}
